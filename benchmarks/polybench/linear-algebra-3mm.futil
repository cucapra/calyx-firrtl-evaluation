// git.status = clean, build.date = Mon Feb 12 16:24:33 EST 2024, git.hash = 04ef979
import "primitives/core.futil";
import "primitives/memories/seq.futil";
import "primitives/binary_operators.futil";
component main() -> () {
  cells {
    @external(1) A_int = seq_mem_d2(32,8,8,4,4);
    A_int_read0_0 = std_reg(32);
    @external(1) B_int = seq_mem_d2(32,8,8,4,4);
    B_int_read0_0 = std_reg(32);
    @external(1) C_int = seq_mem_d2(32,8,8,4,4);
    C_int_read0_0 = std_reg(32);
    @external(1) D_int = seq_mem_d2(32,8,8,4,4);
    D_int_read0_0 = std_reg(32);
    @external(1) E_int = seq_mem_d2(32,8,8,4,4);
    E_int_read0_0 = std_reg(32);
    @external(1) F_int = seq_mem_d2(32,8,8,4,4);
    F_int_read0_0 = std_reg(32);
    @external(1) G_int = seq_mem_d2(32,8,8,4,4);
    add0 = std_add(32);
    add1 = std_add(4);
    add10 = std_add(4);
    add11 = std_add(4);
    add2 = std_add(4);
    add3 = std_add(4);
    add4 = std_add(32);
    add5 = std_add(4);
    add6 = std_add(4);
    add7 = std_add(4);
    add8 = std_add(32);
    add9 = std_add(4);
    bin_read0_0 = std_reg(32);
    bin_read1_0 = std_reg(32);
    bin_read2_0 = std_reg(32);
    const0 = std_const(4,0);
    const1 = std_const(4,7);
    const10 = std_const(4,0);
    const11 = std_const(4,7);
    const12 = std_const(4,0);
    const13 = std_const(4,7);
    const14 = std_const(32,0);
    const15 = std_const(4,0);
    const16 = std_const(4,7);
    const17 = std_const(4,1);
    const18 = std_const(4,1);
    const19 = std_const(4,1);
    const2 = std_const(4,0);
    const20 = std_const(4,0);
    const21 = std_const(4,7);
    const22 = std_const(4,0);
    const23 = std_const(4,7);
    const24 = std_const(32,0);
    const25 = std_const(4,0);
    const26 = std_const(4,7);
    const27 = std_const(4,1);
    const28 = std_const(4,1);
    const29 = std_const(4,1);
    const3 = std_const(4,7);
    const4 = std_const(32,0);
    const5 = std_const(4,0);
    const6 = std_const(4,7);
    const7 = std_const(4,1);
    const8 = std_const(4,1);
    const9 = std_const(4,1);
    i0 = std_reg(4);
    i1 = std_reg(4);
    i2 = std_reg(4);
    j0 = std_reg(4);
    j1 = std_reg(4);
    j2 = std_reg(4);
    k0 = std_reg(4);
    k1 = std_reg(4);
    k2 = std_reg(4);
    le0 = std_le(4);
    le1 = std_le(4);
    le2 = std_le(4);
    le3 = std_le(4);
    le4 = std_le(4);
    le5 = std_le(4);
    le6 = std_le(4);
    le7 = std_le(4);
    le8 = std_le(4);
    mult_pipe0 = std_mult_pipe(32);
    mult_pipe1 = std_mult_pipe(32);
    mult_pipe2 = std_mult_pipe(32);
    red_read00 = std_reg(32);
    red_read10 = std_reg(32);
    red_read20 = std_reg(32);
    v_0 = std_reg(32);
    v_1 = std_reg(32);
    v_2 = std_reg(32);
  }
  wires {
    comb group cond0 {
      le0.left = i0.out;
      le0.right = const1.out;
    }
    comb group cond1 {
      le1.left = j0.out;
      le1.right = const3.out;
    }
    comb group cond2 {
      le2.left = k0.out;
      le2.right = const6.out;
    }
    comb group cond3 {
      le3.left = i1.out;
      le3.right = const11.out;
    }
    comb group cond4 {
      le4.left = j1.out;
      le4.right = const13.out;
    }
    comb group cond5 {
      le5.left = k1.out;
      le5.right = const16.out;
    }
    comb group cond6 {
      le6.left = i2.out;
      le6.right = const21.out;
    }
    comb group cond7 {
      le7.left = j2.out;
      le7.right = const23.out;
    }
    comb group cond8 {
      le8.left = k2.out;
      le8.right = const26.out;
    }
    group let0<"promotable"=1> {
      i0.in = const0.out;
      i0.write_en = 1'd1;
      let0[done] = i0.done;
    }
    group let1<"promotable"=1> {
      j0.in = const2.out;
      j0.write_en = 1'd1;
      let1[done] = j0.done;
    }
    group let10<"promotable"=1> {
      k1.in = const15.out;
      k1.write_en = 1'd1;
      let10[done] = k1.done;
    }
    group let11<"promotable"=2> {
      C_int_read0_0.in = C_int.read_data;
      C_int_read0_0.write_en = C_int.read_done;
      let11[done] = C_int_read0_0.done;
      C_int.addr1 = k1.out;
      C_int.addr0 = i1.out;
      C_int.read_en = 1'd1;
    }
    group let12<"promotable"=2> {
      D_int_read0_0.in = D_int.read_data;
      D_int_read0_0.write_en = D_int.read_done;
      let12[done] = D_int_read0_0.done;
      D_int.addr1 = j1.out;
      D_int.addr0 = k1.out;
      D_int.read_en = 1'd1;
    }
    group let13<"promotable"=4> {
      bin_read1_0.in = mult_pipe1.out;
      bin_read1_0.write_en = mult_pipe1.done;
      let13[done] = bin_read1_0.done;
      mult_pipe1.left = C_int_read0_0.out;
      mult_pipe1.right = D_int_read0_0.out;
      mult_pipe1.go = !mult_pipe1.done ? 1'd1;
    }
    group let14<"promotable"=1> {
      v_1.in = bin_read1_0.out;
      v_1.write_en = 1'd1;
      let14[done] = v_1.done;
    }
    group let15<"promotable"=2> {
      red_read10.in = F_int.read_data;
      red_read10.write_en = F_int.read_done;
      let15[done] = red_read10.done;
      F_int.addr1 = j1.out;
      F_int.addr0 = i1.out;
      F_int.read_en = 1'd1;
    }
    group let16<"promotable"=1> {
      i2.in = const20.out;
      i2.write_en = 1'd1;
      let16[done] = i2.done;
    }
    group let17<"promotable"=1> {
      j2.in = const22.out;
      j2.write_en = 1'd1;
      let17[done] = j2.done;
    }
    group let18<"promotable"=1> {
      k2.in = const25.out;
      k2.write_en = 1'd1;
      let18[done] = k2.done;
    }
    group let19<"promotable"=2> {
      E_int_read0_0.in = E_int.read_data;
      E_int_read0_0.write_en = E_int.read_done;
      let19[done] = E_int_read0_0.done;
      E_int.addr1 = k2.out;
      E_int.addr0 = i2.out;
      E_int.read_en = 1'd1;
    }
    group let2<"promotable"=1> {
      k0.in = const5.out;
      k0.write_en = 1'd1;
      let2[done] = k0.done;
    }
    group let20<"promotable"=2> {
      F_int_read0_0.in = F_int.read_data;
      F_int_read0_0.write_en = F_int.read_done;
      let20[done] = F_int_read0_0.done;
      F_int.addr1 = j2.out;
      F_int.addr0 = k2.out;
      F_int.read_en = 1'd1;
    }
    group let21<"promotable"=4> {
      bin_read2_0.in = mult_pipe2.out;
      bin_read2_0.write_en = mult_pipe2.done;
      let21[done] = bin_read2_0.done;
      mult_pipe2.left = E_int_read0_0.out;
      mult_pipe2.right = F_int_read0_0.out;
      mult_pipe2.go = !mult_pipe2.done ? 1'd1;
    }
    group let22<"promotable"=1> {
      v_2.in = bin_read2_0.out;
      v_2.write_en = 1'd1;
      let22[done] = v_2.done;
    }
    group let23<"promotable"=2> {
      red_read20.in = G_int.read_data;
      red_read20.write_en = G_int.read_done;
      let23[done] = red_read20.done;
      G_int.addr1 = j2.out;
      G_int.addr0 = i2.out;
      G_int.read_en = 1'd1;
    }
    group let3<"promotable"=2> {
      A_int_read0_0.in = A_int.read_data;
      A_int_read0_0.write_en = A_int.read_done;
      let3[done] = A_int_read0_0.done;
      A_int.addr1 = k0.out;
      A_int.addr0 = i0.out;
      A_int.read_en = 1'd1;
    }
    group let4<"promotable"=2> {
      B_int_read0_0.in = B_int.read_data;
      B_int_read0_0.write_en = B_int.read_done;
      let4[done] = B_int_read0_0.done;
      B_int.addr1 = j0.out;
      B_int.addr0 = k0.out;
      B_int.read_en = 1'd1;
    }
    group let5<"promotable"=4> {
      bin_read0_0.in = mult_pipe0.out;
      bin_read0_0.write_en = mult_pipe0.done;
      let5[done] = bin_read0_0.done;
      mult_pipe0.left = A_int_read0_0.out;
      mult_pipe0.right = B_int_read0_0.out;
      mult_pipe0.go = !mult_pipe0.done ? 1'd1;
    }
    group let6<"promotable"=1> {
      v_0.in = bin_read0_0.out;
      v_0.write_en = 1'd1;
      let6[done] = v_0.done;
    }
    group let7<"promotable"=2> {
      red_read00.in = E_int.read_data;
      red_read00.write_en = E_int.read_done;
      let7[done] = red_read00.done;
      E_int.addr1 = j0.out;
      E_int.addr0 = i0.out;
      E_int.read_en = 1'd1;
    }
    group let8<"promotable"=1> {
      i1.in = const10.out;
      i1.write_en = 1'd1;
      let8[done] = i1.done;
    }
    group let9<"promotable"=1> {
      j1.in = const12.out;
      j1.write_en = 1'd1;
      let9[done] = j1.done;
    }
    group upd0<"promotable"=1> {
      E_int.addr1 = j0.out;
      E_int.addr0 = i0.out;
      E_int.write_en = 1'd1;
      E_int.write_data = const4.out;
      upd0[done] = E_int.write_done;
    }
    group upd1<"promotable"=1> {
      E_int.addr1 = j0.out;
      E_int.addr0 = i0.out;
      E_int.write_en = 1'd1;
      add0.left = red_read00.out;
      add0.right = v_0.out;
      E_int.write_data = add0.out;
      upd1[done] = E_int.write_done;
    }
    group upd10<"promotable"=1> {
      G_int.addr1 = j2.out;
      G_int.addr0 = i2.out;
      G_int.write_en = 1'd1;
      G_int.write_data = const24.out;
      upd10[done] = G_int.write_done;
    }
    group upd11<"promotable"=1> {
      G_int.addr1 = j2.out;
      G_int.addr0 = i2.out;
      G_int.write_en = 1'd1;
      add8.left = red_read20.out;
      add8.right = v_2.out;
      G_int.write_data = add8.out;
      upd11[done] = G_int.write_done;
    }
    group upd12<"promotable"=1> {
      k2.write_en = 1'd1;
      add9.left = k2.out;
      add9.right = const27.out;
      k2.in = add9.out;
      upd12[done] = k2.done;
    }
    group upd13<"promotable"=1> {
      j2.write_en = 1'd1;
      add10.left = j2.out;
      add10.right = const28.out;
      j2.in = add10.out;
      upd13[done] = j2.done;
    }
    group upd14<"promotable"=1> {
      i2.write_en = 1'd1;
      add11.left = i2.out;
      add11.right = const29.out;
      i2.in = add11.out;
      upd14[done] = i2.done;
    }
    group upd2<"promotable"=1> {
      k0.write_en = 1'd1;
      add1.left = k0.out;
      add1.right = const7.out;
      k0.in = add1.out;
      upd2[done] = k0.done;
    }
    group upd3<"promotable"=1> {
      j0.write_en = 1'd1;
      add2.left = j0.out;
      add2.right = const8.out;
      j0.in = add2.out;
      upd3[done] = j0.done;
    }
    group upd4<"promotable"=1> {
      i0.write_en = 1'd1;
      add3.left = i0.out;
      add3.right = const9.out;
      i0.in = add3.out;
      upd4[done] = i0.done;
    }
    group upd5<"promotable"=1> {
      F_int.addr1 = j1.out;
      F_int.addr0 = i1.out;
      F_int.write_en = 1'd1;
      F_int.write_data = const14.out;
      upd5[done] = F_int.write_done;
    }
    group upd6<"promotable"=1> {
      F_int.addr1 = j1.out;
      F_int.addr0 = i1.out;
      F_int.write_en = 1'd1;
      add4.left = red_read10.out;
      add4.right = v_1.out;
      F_int.write_data = add4.out;
      upd6[done] = F_int.write_done;
    }
    group upd7<"promotable"=1> {
      k1.write_en = 1'd1;
      add5.left = k1.out;
      add5.right = const17.out;
      k1.in = add5.out;
      upd7[done] = k1.done;
    }
    group upd8<"promotable"=1> {
      j1.write_en = 1'd1;
      add6.left = j1.out;
      add6.right = const18.out;
      j1.in = add6.out;
      upd8[done] = j1.done;
    }
    group upd9<"promotable"=1> {
      i1.write_en = 1'd1;
      add7.left = i1.out;
      add7.right = const19.out;
      i1.in = add7.out;
      upd9[done] = i1.done;
    }
  }
  control {
    seq {
      @pos(0) let0;
      @bound(8) while le0.out with cond0 {
        seq {
          @pos(1) let1;
          @bound(8) while le1.out with cond1 {
            seq {
              @pos(2) upd0;
              @pos(3) let2;
              @bound(8) while le2.out with cond2 {
                seq {
                  par {
                    @pos(4) let3;
                    @pos(5) let4;
                  }
                  let5;
                  let6;
                  let7;
                  upd1;
                  @pos(3) upd2;
                }
              }
              @pos(1) upd3;
            }
          }
          @pos(0) upd4;
        }
      }
      @pos(6) let8;
      @bound(8) while le3.out with cond3 {
        seq {
          @pos(7) let9;
          @bound(8) while le4.out with cond4 {
            seq {
              @pos(8) upd5;
              @pos(9) let10;
              @bound(8) while le5.out with cond5 {
                seq {
                  par {
                    @pos(10) let11;
                    @pos(11) let12;
                  }
                  let13;
                  let14;
                  let15;
                  upd6;
                  @pos(9) upd7;
                }
              }
              @pos(7) upd8;
            }
          }
          @pos(6) upd9;
        }
      }
      @pos(12) let16;
      @bound(8) while le6.out with cond6 {
        seq {
          @pos(13) let17;
          @bound(8) while le7.out with cond7 {
            seq {
              @pos(14) upd10;
              @pos(15) let18;
              @bound(8) while le8.out with cond8 {
                seq {
                  par {
                    @pos(16) let19;
                    @pos(17) let20;
                  }
                  let21;
                  let22;
                  let23;
                  upd11;
                  @pos(15) upd12;
                }
              }
              @pos(13) upd13;
            }
          }
          @pos(12) upd14;
        }
      }
    }
  }
}
metadata #{
  0: for (let i: ubit<4> = 0..8) {
  1:   for (let j: ubit<4> = 0..8) {
  2:     E_int[i][j] := (0 as ubit<32>);
  3:     for (let k: ubit<4> = 0..8) {
  4:       let v: ubit<32> = A_int[i][k] * B_int[k][j];
  5:       let v: ubit<32> = A_int[i][k] * B_int[k][j];
  6: for (let i: ubit<4> = 0..8) {
  7:   for (let j: ubit<4> = 0..8) {
  8:     F_int[i][j] := (0 as ubit<32>);
  9:     for (let k: ubit<4> = 0..8) {
  10:       let v: ubit<32> = C_int[i][k] * D_int[k][j];
  11:       let v: ubit<32> = C_int[i][k] * D_int[k][j];
  12: for (let i: ubit<4> = 0..8) {
  13:   for (let j: ubit<4> = 0..8) {
  14:     G_int[i][j] := (0 as ubit<32>);
  15:     for (let k: ubit<4> = 0..8) {
  16:       let v: ubit<32> = E_int[i][k] * F_int[k][j];
  17:       let v: ubit<32> = E_int[i][k] * F_int[k][j];
}#
