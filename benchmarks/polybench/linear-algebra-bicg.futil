// git.status = clean, build.date = Mon Feb 12 16:24:33 EST 2024, git.hash = 04ef979
import "primitives/core.futil";
import "primitives/memories/seq.futil";
import "primitives/binary_operators.futil";
component main() -> () {
  cells {
    A_i_j_0 = std_reg(32);
    @external(1) A_int = seq_mem_d2(32,8,8,4,4);
    add0 = std_add(4);
    add1 = std_add(32);
    add2 = std_add(32);
    add3 = std_add(4);
    add4 = std_add(4);
    bin_read0_0 = std_reg(32);
    bin_read1_0 = std_reg(32);
    const0 = std_const(4,0);
    const1 = std_const(4,7);
    const10 = std_const(4,1);
    const2 = std_const(32,0);
    const3 = std_const(4,1);
    const4 = std_const(4,0);
    const5 = std_const(4,7);
    const6 = std_const(32,0);
    const7 = std_const(4,0);
    const8 = std_const(4,7);
    const9 = std_const(4,1);
    i0 = std_reg(4);
    i1 = std_reg(4);
    j0 = std_reg(4);
    le0 = std_le(4);
    le1 = std_le(4);
    le2 = std_le(4);
    mult_pipe0 = std_mult_pipe(32);
    mult_pipe1 = std_mult_pipe(32);
    @external(1) p_int = seq_mem_d1(32,8,4);
    p_int_read0_0 = std_reg(32);
    q0_0 = std_reg(32);
    @external(1) q_int = seq_mem_d1(32,8,4);
    @external(1) r_int = seq_mem_d1(32,8,4);
    r_int_read0_0 = std_reg(32);
    s0_0 = std_reg(32);
    @external(1) s_int = seq_mem_d1(32,8,4);
  }
  wires {
    comb group cond0 {
      le0.left = i0.out;
      le0.right = const1.out;
    }
    comb group cond1 {
      le1.left = i1.out;
      le1.right = const5.out;
    }
    comb group cond2 {
      le2.left = j0.out;
      le2.right = const8.out;
    }
    group let0<"promotable"=1> {
      i0.in = const0.out;
      i0.write_en = 1'd1;
      let0[done] = i0.done;
    }
    group let1<"promotable"=1> {
      i1.in = const4.out;
      i1.write_en = 1'd1;
      let1[done] = i1.done;
    }
    group let2<"promotable"=1> {
      j0.in = const7.out;
      j0.write_en = 1'd1;
      let2[done] = j0.done;
    }
    group let3<"promotable"=2> {
      s0_0.in = s_int.read_data;
      s0_0.write_en = s_int.read_done;
      let3[done] = s0_0.done;
      s_int.addr0 = j0.out;
      s_int.read_en = 1'd1;
    }
    group let4<"promotable"=2> {
      q0_0.in = q_int.read_data;
      q0_0.write_en = q_int.read_done;
      let4[done] = q0_0.done;
      q_int.addr0 = i1.out;
      q_int.read_en = 1'd1;
    }
    group let5<"promotable"=2> {
      A_i_j_0.in = A_int.read_data;
      A_i_j_0.write_en = A_int.read_done;
      let5[done] = A_i_j_0.done;
      A_int.addr1 = j0.out;
      A_int.addr0 = i1.out;
      A_int.read_en = 1'd1;
    }
    group let6<"promotable"=2> {
      r_int_read0_0.in = r_int.read_data;
      r_int_read0_0.write_en = r_int.read_done;
      let6[done] = r_int_read0_0.done;
      r_int.addr0 = i1.out;
      r_int.read_en = 1'd1;
    }
    group let7<"promotable"=4> {
      bin_read0_0.in = mult_pipe0.out;
      bin_read0_0.write_en = mult_pipe0.done;
      let7[done] = bin_read0_0.done;
      mult_pipe0.left = r_int_read0_0.out;
      mult_pipe0.right = A_i_j_0.out;
      mult_pipe0.go = !mult_pipe0.done ? 1'd1;
    }
    group let8<"promotable"=2> {
      p_int_read0_0.in = p_int.read_data;
      p_int_read0_0.write_en = p_int.read_done;
      let8[done] = p_int_read0_0.done;
      p_int.addr0 = j0.out;
      p_int.read_en = 1'd1;
    }
    group let9<"promotable"=4> {
      bin_read1_0.in = mult_pipe1.out;
      bin_read1_0.write_en = mult_pipe1.done;
      let9[done] = bin_read1_0.done;
      mult_pipe1.left = A_i_j_0.out;
      mult_pipe1.right = p_int_read0_0.out;
      mult_pipe1.go = !mult_pipe1.done ? 1'd1;
    }
    group upd0<"promotable"=1> {
      s_int.addr0 = i0.out;
      s_int.write_en = 1'd1;
      s_int.write_data = const2.out;
      upd0[done] = s_int.write_done;
    }
    group upd1<"promotable"=1> {
      i0.write_en = 1'd1;
      add0.left = i0.out;
      add0.right = const3.out;
      i0.in = add0.out;
      upd1[done] = i0.done;
    }
    group upd2<"promotable"=1> {
      q_int.addr0 = i1.out;
      q_int.write_en = 1'd1;
      q_int.write_data = const6.out;
      upd2[done] = q_int.write_done;
    }
    group upd3<"promotable"=1> {
      s_int.addr0 = j0.out;
      s_int.write_en = 1'd1;
      add1.left = s0_0.out;
      add1.right = bin_read0_0.out;
      s_int.write_data = add1.out;
      upd3[done] = s_int.write_done;
    }
    group upd4<"promotable"=1> {
      q_int.addr0 = i1.out;
      q_int.write_en = 1'd1;
      add2.left = q0_0.out;
      add2.right = bin_read1_0.out;
      q_int.write_data = add2.out;
      upd4[done] = q_int.write_done;
    }
    group upd5<"promotable"=1> {
      j0.write_en = 1'd1;
      add3.left = j0.out;
      add3.right = const9.out;
      j0.in = add3.out;
      upd5[done] = j0.done;
    }
    group upd6<"promotable"=1> {
      i1.write_en = 1'd1;
      add4.left = i1.out;
      add4.right = const10.out;
      i1.in = add4.out;
      upd6[done] = i1.done;
    }
  }
  control {
    seq {
      @pos(0) let0;
      @bound(8) while le0.out with cond0 {
        seq {
          @pos(1) upd0;
          @pos(0) upd1;
        }
      }
      @pos(2) let1;
      @bound(8) while le1.out with cond1 {
        seq {
          @pos(3) upd2;
          @pos(4) let2;
          @bound(8) while le2.out with cond2 {
            seq {
              par {
                @pos(5) let3;
                @pos(6) let4;
                @pos(7) let5;
              }
              @pos(8) let6;
              par {
                seq {
                  let7;
                  upd3;
                }
                @pos(9) let8;
              }
              let9;
              upd4;
              @pos(4) upd5;
            }
          }
          @pos(2) upd6;
        }
      }
    }
  }
}
metadata #{
  0: for (let i: ubit<4> = 0..8) {
  1:   s_int[i] := 0;
  2: for (let i: ubit<4> = 0..8) {
  3:   q_int[i] := 0;
  4:   for (let j: ubit<4> = 0..8) {
  5:     let s0: ubit<32> = s_int[j];
  6:     let q0: ubit<32> = q_int[i];
  7:     let A_i_j: ubit<32> = A_int[i][j];
  8:     s_int[j] := s0 + r_int[i] * A_i_j;
  9:     q_int[i] := q0 + A_i_j * p_int[j];
}#
