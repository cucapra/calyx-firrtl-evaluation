// git.status = clean, build.date = Mon Feb 12 16:24:33 EST 2024, git.hash = 04ef979
import "primitives/core.futil";
import "primitives/memories/seq.futil";
import "primitives/binary_operators.futil";
component main() -> () {
  cells {
    ref A_int = seq_mem_d2(32,8,8,4,4);
    A_int_read0_0 = std_reg(32);
    A_int_read1_0 = std_reg(32);
    A_int_read2_0 = std_reg(32);
    ref B_int = seq_mem_d2(32,8,12,4,4);
    B_int_read0_0 = std_reg(32);
    B_int_read1_0 = std_reg(32);
    B_int_read2_0 = std_reg(32);
    C_i_j_0 = std_reg(32);
    ref C_int = seq_mem_d2(32,8,12,4,4);
    C_k_j_0 = std_reg(32);
    add0 = std_add(32);
    add1 = std_add(32);
    add2 = std_add(4);
    add3 = std_add(32);
    add4 = std_add(32);
    add5 = std_add(4);
    add6 = std_add(4);
    ref alpha_int = seq_mem_d1(32,1,1);
    alpha_int_read0_0 = std_reg(32);
    alpha_int_read1_0 = std_reg(32);
    ref beta_int = seq_mem_d1(32,1,1);
    beta_int_read0_0 = std_reg(32);
    bin_read0_0 = std_reg(32);
    bin_read1_0 = std_reg(32);
    bin_read2_0 = std_reg(32);
    bin_read3_0 = std_reg(32);
    bin_read4_0 = std_reg(32);
    bin_read5_0 = std_reg(32);
    bin_read6_0 = std_reg(32);
    const0 = std_const(32,0);
    const1 = std_const(4,0);
    const10 = std_const(1,0);
    const11 = std_const(4,1);
    const12 = std_const(4,1);
    const2 = std_const(4,7);
    const3 = std_const(4,0);
    const4 = std_const(4,11);
    const5 = std_const(32,0);
    const6 = std_const(4,0);
    const7 = std_const(1,0);
    const8 = std_const(4,1);
    const9 = std_const(1,0);
    i0 = std_reg(4);
    j0 = std_reg(4);
    k_0 = std_reg(4);
    le0 = std_le(4);
    le1 = std_le(4);
    lt0 = std_lt(4);
    mult_pipe0 = std_mult_pipe(32);
    mult_pipe1 = std_mult_pipe(32);
    mult_pipe2 = std_mult_pipe(32);
    mult_pipe3 = std_mult_pipe(32);
    mult_pipe4 = std_mult_pipe(32);
    mult_pipe5 = std_mult_pipe(32);
    mult_pipe6 = std_mult_pipe(32);
    temp2_0 = std_reg(32);
  }
  wires {
    comb group cond0 {
      le0.left = i0.out;
      le0.right = const2.out;
    }
    comb group cond1 {
      le1.left = j0.out;
      le1.right = const4.out;
    }
    comb group cond2 {
      lt0.left = k_0.out;
      lt0.right = i0.out;
    }
    group let0<"promotable"=1> {
      temp2_0.in = const0.out;
      temp2_0.write_en = 1'd1;
      let0[done] = temp2_0.done;
    }
    group let1<"promotable"=1> {
      i0.in = const1.out;
      i0.write_en = 1'd1;
      let1[done] = i0.done;
    }
    group let10<"promotable"=2> {
      B_int_read1_0.in = B_int.read_data;
      B_int_read1_0.write_en = B_int.read_done;
      let10[done] = B_int_read1_0.done;
      B_int.addr1 = j0.out;
      B_int.addr0 = k_0.out;
      B_int.read_en = 1'd1;
    }
    group let11<"promotable"=2> {
      A_int_read1_0.in = A_int.read_data;
      A_int_read1_0.write_en = A_int.read_done;
      let11[done] = A_int_read1_0.done;
      A_int.addr1 = k_0.out;
      A_int.addr0 = i0.out;
      A_int.read_en = 1'd1;
    }
    group let12<"promotable"=4> {
      bin_read2_0.in = mult_pipe2.out;
      bin_read2_0.write_en = mult_pipe2.done;
      let12[done] = bin_read2_0.done;
      mult_pipe2.left = B_int_read1_0.out;
      mult_pipe2.right = A_int_read1_0.out;
      mult_pipe2.go = !mult_pipe2.done ? 1'd1;
    }
    group let13<"promotable"=2> {
      C_i_j_0.in = C_int.read_data;
      C_i_j_0.write_en = C_int.read_done;
      let13[done] = C_i_j_0.done;
      C_int.addr1 = j0.out;
      C_int.addr0 = i0.out;
      C_int.read_en = 1'd1;
    }
    group let14<"promotable"=2> {
      beta_int_read0_0.in = beta_int.read_data;
      beta_int_read0_0.write_en = beta_int.read_done;
      let14[done] = beta_int_read0_0.done;
      beta_int.addr0 = const9.out;
      beta_int.read_en = 1'd1;
    }
    group let15<"promotable"=2> {
      alpha_int_read1_0.in = alpha_int.read_data;
      alpha_int_read1_0.write_en = alpha_int.read_done;
      let15[done] = alpha_int_read1_0.done;
      alpha_int.addr0 = const10.out;
      alpha_int.read_en = 1'd1;
    }
    group let16<"promotable"=2> {
      B_int_read2_0.in = B_int.read_data;
      B_int_read2_0.write_en = B_int.read_done;
      let16[done] = B_int_read2_0.done;
      B_int.addr1 = j0.out;
      B_int.addr0 = i0.out;
      B_int.read_en = 1'd1;
    }
    group let17<"promotable"=2> {
      A_int_read2_0.in = A_int.read_data;
      A_int_read2_0.write_en = A_int.read_done;
      let17[done] = A_int_read2_0.done;
      A_int.addr1 = i0.out;
      A_int.addr0 = i0.out;
      A_int.read_en = 1'd1;
    }
    group let18<"promotable"=4> {
      bin_read3_0.in = mult_pipe3.out;
      bin_read3_0.write_en = mult_pipe3.done;
      let18[done] = bin_read3_0.done;
      mult_pipe3.left = beta_int_read0_0.out;
      mult_pipe3.right = C_i_j_0.out;
      mult_pipe3.go = !mult_pipe3.done ? 1'd1;
    }
    group let19<"promotable"=4> {
      bin_read4_0.in = mult_pipe4.out;
      bin_read4_0.write_en = mult_pipe4.done;
      let19[done] = bin_read4_0.done;
      mult_pipe4.left = alpha_int_read1_0.out;
      mult_pipe4.right = B_int_read2_0.out;
      mult_pipe4.go = !mult_pipe4.done ? 1'd1;
    }
    group let2<"promotable"=1> {
      j0.in = const3.out;
      j0.write_en = 1'd1;
      let2[done] = j0.done;
    }
    group let20<"promotable"=4> {
      bin_read5_0.in = mult_pipe5.out;
      bin_read5_0.write_en = mult_pipe5.done;
      let20[done] = bin_read5_0.done;
      mult_pipe5.left = bin_read4_0.out;
      mult_pipe5.right = A_int_read2_0.out;
      mult_pipe5.go = !mult_pipe5.done ? 1'd1;
    }
    group let21<"promotable"=4> {
      bin_read6_0.in = mult_pipe6.out;
      bin_read6_0.write_en = mult_pipe6.done;
      let21[done] = bin_read6_0.done;
      mult_pipe6.left = alpha_int_read1_0.out;
      mult_pipe6.right = temp2_0.out;
      mult_pipe6.go = !mult_pipe6.done ? 1'd1;
    }
    group let3<"promotable"=1> {
      k_0.in = const6.out;
      k_0.write_en = 1'd1;
      let3[done] = k_0.done;
    }
    group let4<"promotable"=2> {
      C_k_j_0.in = C_int.read_data;
      C_k_j_0.write_en = C_int.read_done;
      let4[done] = C_k_j_0.done;
      C_int.addr1 = j0.out;
      C_int.addr0 = k_0.out;
      C_int.read_en = 1'd1;
    }
    group let5<"promotable"=2> {
      alpha_int_read0_0.in = alpha_int.read_data;
      alpha_int_read0_0.write_en = alpha_int.read_done;
      let5[done] = alpha_int_read0_0.done;
      alpha_int.addr0 = const7.out;
      alpha_int.read_en = 1'd1;
    }
    group let6<"promotable"=2> {
      B_int_read0_0.in = B_int.read_data;
      B_int_read0_0.write_en = B_int.read_done;
      let6[done] = B_int_read0_0.done;
      B_int.addr1 = j0.out;
      B_int.addr0 = i0.out;
      B_int.read_en = 1'd1;
    }
    group let7<"promotable"=2> {
      A_int_read0_0.in = A_int.read_data;
      A_int_read0_0.write_en = A_int.read_done;
      let7[done] = A_int_read0_0.done;
      A_int.addr1 = k_0.out;
      A_int.addr0 = i0.out;
      A_int.read_en = 1'd1;
    }
    group let8<"promotable"=4> {
      bin_read0_0.in = mult_pipe0.out;
      bin_read0_0.write_en = mult_pipe0.done;
      let8[done] = bin_read0_0.done;
      mult_pipe0.left = alpha_int_read0_0.out;
      mult_pipe0.right = B_int_read0_0.out;
      mult_pipe0.go = !mult_pipe0.done ? 1'd1;
    }
    group let9<"promotable"=4> {
      bin_read1_0.in = mult_pipe1.out;
      bin_read1_0.write_en = mult_pipe1.done;
      let9[done] = bin_read1_0.done;
      mult_pipe1.left = bin_read0_0.out;
      mult_pipe1.right = A_int_read0_0.out;
      mult_pipe1.go = !mult_pipe1.done ? 1'd1;
    }
    group upd0<"promotable"=1> {
      temp2_0.write_en = 1'd1;
      temp2_0.in = const5.out;
      upd0[done] = temp2_0.done;
    }
    group upd1<"promotable"=1> {
      C_int.addr1 = j0.out;
      C_int.addr0 = k_0.out;
      C_int.write_en = 1'd1;
      add0.left = bin_read1_0.out;
      add0.right = C_k_j_0.out;
      C_int.write_data = add0.out;
      upd1[done] = C_int.write_done;
    }
    group upd2<"promotable"=1> {
      temp2_0.write_en = 1'd1;
      add1.left = temp2_0.out;
      add1.right = bin_read2_0.out;
      temp2_0.in = add1.out;
      upd2[done] = temp2_0.done;
    }
    group upd3<"promotable"=1> {
      k_0.write_en = 1'd1;
      add2.left = k_0.out;
      add2.right = const8.out;
      k_0.in = add2.out;
      upd3[done] = k_0.done;
    }
    group upd4<"promotable"=1> {
      C_int.addr1 = j0.out;
      C_int.addr0 = i0.out;
      C_int.write_en = 1'd1;
      add4.left = add3.out;
      add4.right = bin_read6_0.out;
      add3.left = bin_read3_0.out;
      add3.right = bin_read5_0.out;
      C_int.write_data = add4.out;
      upd4[done] = C_int.write_done;
    }
    group upd5<"promotable"=1> {
      j0.write_en = 1'd1;
      add5.left = j0.out;
      add5.right = const11.out;
      j0.in = add5.out;
      upd5[done] = j0.done;
    }
    group upd6<"promotable"=1> {
      i0.write_en = 1'd1;
      add6.left = i0.out;
      add6.right = const12.out;
      i0.in = add6.out;
      upd6[done] = i0.done;
    }
  }
  control {
    seq {
      @pos(0) let0;
      @pos(1) let1;
      @bound(8) while le0.out with cond0 {
        seq {
          @pos(2) let2;
          @bound(12) while le1.out with cond1 {
            seq {
              par {
                @pos(3) upd0;
                @pos(4) let3;
              }
              while lt0.out with cond2 {
                seq {
                  @pos(5) let4;
                  par {
                    @pos(6) let5;
                    @pos(7) let6;
                    @pos(8) let7;
                  }
                  let8;
                  let9;
                  upd1;
                  par {
                    @pos(9) let10;
                    @pos(10) let11;
                  }
                  par {
                    seq {
                      let12;
                      upd2;
                    }
                    @pos(11) upd3;
                  }
                }
              }
              @pos(12) let13;
              par {
                @pos(13) let14;
                @pos(14) let15;
                @pos(15) let16;
                @pos(16) let17;
              }
              let18;
              let19;
              let20;
              let21;
              upd4;
              @pos(2) upd5;
            }
          }
          @pos(1) upd6;
        }
      }
    }
  }
}
metadata #{
  0: let temp2: ubit<32> = 0;
  1: for (let i: ubit<4> = 0..8) {
  2:   for (let j: ubit<4> = 0..12) {
  3:     temp2 := 0;
  4:     let k: ubit<4> = 0;
  5:       let C_k_j: ubit<32> = C_int[k][j];
  6:       C_int[k][j] := alpha_int[0] * B_int[i][j] * A_int[i][k] + C_k_j;
  7:       C_int[k][j] := alpha_int[0] * B_int[i][j] * A_int[i][k] + C_k_j;
  8:       C_int[k][j] := alpha_int[0] * B_int[i][j] * A_int[i][k] + C_k_j;
  9:       temp2 := temp2 + B_int[k][j] * A_int[i][k];
  10:       temp2 := temp2 + B_int[k][j] * A_int[i][k];
  11:       k := k + 1;
  12:     let C_i_j: ubit<32> = C_int[i][j];
  13:     C_int[i][j] := beta_int[0] * C_i_j + alpha_int[0]*B_int[i][j] * A_int[i][i] + alpha_int[0] * temp2;
  14:     C_int[i][j] := beta_int[0] * C_i_j + alpha_int[0]*B_int[i][j] * A_int[i][i] + alpha_int[0] * temp2;
  15:     C_int[i][j] := beta_int[0] * C_i_j + alpha_int[0]*B_int[i][j] * A_int[i][i] + alpha_int[0] * temp2;
  16:     C_int[i][j] := beta_int[0] * C_i_j + alpha_int[0]*B_int[i][j] * A_int[i][i] + alpha_int[0] * temp2;
}#
